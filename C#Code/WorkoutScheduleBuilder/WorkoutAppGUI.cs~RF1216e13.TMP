using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApplication1
{
    public partial class WorkoutAppGUI : Form
    {
        public WorkoutAppGUI()
        {
            InitializeComponent();
            numDaysNumInput.Value = 9;
            numWeeksNumInput.Value = 16;
            cycleMileageStartNumInput.Value = 40;
            cycleMileageEndNumInput.Value = 50;
            cycleMileageDeltaNumInput.Value = 2;
            numOfLongRunLevels.Value = 3;
            numCyclesNumInput.Value = numWeeksNumInput.Value * 7  / numDaysNumInput.Value;

            updateSpeedWorkoutTable();

        }


        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }



        private void numDays_ValueChanged(object sender, EventArgs e)
        {

            workoutBuilderTable.Controls.Clear();
            workoutBuilderTable.AutoSize = true;
            workoutBuilderTable.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            workoutBuilderTable.ColumnCount = 3;
            workoutBuilderTable.RowCount = (int)numDaysNumInput.Value + 1;

            for (int ii = 0; ii < (int)numDaysNumInput.Value + 1; ii++)
            {

                //Next, add a row.  Only do this when once, when creating the first column
                if (ii == 0)
                {
                    workoutBuilderTable.RowStyles.Add(new RowStyle(SizeType.AutoSize));
                    workoutBuilderTable.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
                    workoutBuilderTable.Controls.Add(new Label() { Text = "Day", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 0);
                    workoutBuilderTable.Controls.Add(new Label() { Text = "Run", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 1, 0);
                    workoutBuilderTable.Controls.Add(new Label() { Text = "Gym Workout", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 2, 0);

                }
                else
                {
                    ComboBox runCmbBox = new ComboBox();
                    runCmbBox.Items.Add("Easy Run");
                    runCmbBox.Items.Add("Long Run");
                    runCmbBox.Items.Add("Speed Workout");
                    runCmbBox.Items.Add("Tempo");
                    runCmbBox.Items.Add("Rest");
                    runCmbBox.Anchor = AnchorStyles.None;
                    runCmbBox.Dock = DockStyle.Fill;
                    runCmbBox.SelectedValueChanged += new EventHandler(runComboBox_ValueChanged);



                    ComboBox gymCmbBox = new ComboBox();
                    gymCmbBox.Items.Add("Legs");
                    gymCmbBox.Items.Add("Chest");
                    gymCmbBox.Items.Add("Shoulders");
                    gymCmbBox.Items.Add("Back");
                    gymCmbBox.Items.Add("Abs");
                    gymCmbBox.Items.Add("Rest");
                    gymCmbBox.Anchor = AnchorStyles.None;
                    gymCmbBox.Dock = DockStyle.Fill;
                    gymCmbBox.SelectedValueChanged += new EventHandler(gymComboBox_ValueChanged);


                    workoutBuilderTable.Controls.Add(new Label() { Text = ii.ToString(), Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, ii);
                    workoutBuilderTable.Controls.Add(runCmbBox, 1, ii);
                    workoutBuilderTable.Controls.Add(gymCmbBox, 2, ii);
                    gymCmbBox.Text = "Rest";
                    runCmbBox.SelectedIndex = runCmbBox.FindStringExact("Rest");



                }
            }
            initTableSelection((int)numDaysNumInput.Value);
            numWeeksNumInput.Value = 16;
            numCyclesNumInput.Value = numWeeksNumInput.Value * 7 / numDaysNumInput.Value;
        }

        private void initTableSelection(int numRows)
        {
            switch (numRows)
            {

                case 7:

                    workoutBuilderTable.GetControlFromPosition(1, 1).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 2).Text = "Speed Workout";
                    workoutBuilderTable.GetControlFromPosition(1, 3).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(1, 4).Text = "Tempo";
                    workoutBuilderTable.GetControlFromPosition(1, 5).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 6).Text = "Long Run";
                    workoutBuilderTable.GetControlFromPosition(1, 7).Text = "Easy Run";

                    workoutBuilderTable.GetControlFromPosition(2, 1).Text = "Chest";
                    workoutBuilderTable.GetControlFromPosition(2, 2).Text = "Back";
                    workoutBuilderTable.GetControlFromPosition(2, 3).Text = "Legs";
                    workoutBuilderTable.GetControlFromPosition(2, 4).Text = "Abs";
                    workoutBuilderTable.GetControlFromPosition(2, 5).Text = "Shoulders";
                    workoutBuilderTable.GetControlFromPosition(2, 6).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(2, 7).Text = "Rest";

                    break;

                case 8:

                    workoutBuilderTable.GetControlFromPosition(1, 1).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 2).Text = "Speed Workout";
                    workoutBuilderTable.GetControlFromPosition(1, 3).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(1, 4).Text = "Tempo";
                    workoutBuilderTable.GetControlFromPosition(1, 5).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(1, 6).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 7).Text = "Long Run";
                    workoutBuilderTable.GetControlFromPosition(1, 8).Text = "Easy Run";

                    workoutBuilderTable.GetControlFromPosition(2, 1).Text = "Chest";
                    workoutBuilderTable.GetControlFromPosition(2, 2).Text = "Back";
                    workoutBuilderTable.GetControlFromPosition(2, 3).Text = "Legs";
                    workoutBuilderTable.GetControlFromPosition(2, 4).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(2, 5).Text = "Abs";
                    workoutBuilderTable.GetControlFromPosition(2, 6).Text = "Shoulders";
                    workoutBuilderTable.GetControlFromPosition(2, 7).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(2, 8).Text = "Rest";

                    break;

                case 9:

                    workoutBuilderTable.GetControlFromPosition(1, 1).Text = "Long Run";
                    workoutBuilderTable.GetControlFromPosition(1, 2).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 3).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(1, 4).Text = "Tempo";
                    workoutBuilderTable.GetControlFromPosition(1, 5).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 6).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(1, 7).Text = "Easy Run";
                    workoutBuilderTable.GetControlFromPosition(1, 8).Text = "Speed Workout";
                    workoutBuilderTable.GetControlFromPosition(1, 9).Text = "Rest";

                    workoutBuilderTable.GetControlFromPosition(2, 1).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(2, 2).Text = "Abs";
                    workoutBuilderTable.GetControlFromPosition(2, 3).Text = "Chest";
                    workoutBuilderTable.GetControlFromPosition(2, 4).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(2, 5).Text = "Back";
                    workoutBuilderTable.GetControlFromPosition(2, 6).Text = "Legs";
                    workoutBuilderTable.GetControlFromPosition(2, 7).Text = "Shoulders";
                    workoutBuilderTable.GetControlFromPosition(2, 8).Text = "Rest";
                    workoutBuilderTable.GetControlFromPosition(2, 9).Text = "Rest";

                    break;

                default:
                    break;
            }
        }

        private void gymComboBox_ValueChanged(object sender, EventArgs e)
        {
            ComboBox gymCmbBox = (ComboBox)sender;
            string selectedString = (string)gymCmbBox.SelectedItem;

            switch (selectedString)
            {
                case "Rest":
                    gymCmbBox.BackColor = Color.LightBlue;
                    break;
                case "Shoulders":
                    gymCmbBox.BackColor = Color.Yellow;
                    break;
                case "Abs":
                    gymCmbBox.BackColor = Color.Yellow;
                    break;
                case "Chest":
                    gymCmbBox.BackColor = Color.Yellow;
                    break;
                case "Back":
                    gymCmbBox.BackColor = Color.Yellow;
                    break;
                case "Legs":
                    gymCmbBox.BackColor = Color.Yellow;
                    break;
                default:
                    break;


            }
        }

        private void runComboBox_ValueChanged(object sender, EventArgs e)
        {
            ComboBox runCmbBox = (ComboBox)sender;
            string selectedString = (string)runCmbBox.SelectedItem;

            switch (selectedString)
            {
                case "Rest":
                    runCmbBox.BackColor = Color.LightBlue;
                    break;
                case "Easy Run":
                    runCmbBox.BackColor = Color.LightGreen;
                    break;
                case "Long Run":
                    runCmbBox.BackColor = Color.Green;
                    break;
                case "Tempo":
                    runCmbBox.BackColor = Color.Orange;
                    break;
                case "Speed Workout":
                    runCmbBox.BackColor = Color.Orange;
                    break;
                default:
                    break;


            }
        }

        private void numCycles_ValueChanged(object sender, EventArgs e)
        {
            numWeeksNumInput.Value = numCyclesNumInput.Value * numDaysNumInput.Value / 7;
            updateCycleMileageTable();

        }

        private void numWeeks_ValueChanged(object sender, EventArgs e)
        {
            numCyclesNumInput.Value = numWeeksNumInput.Value * 7 / numDaysNumInput.Value;
            updateCycleMileageTable();
        }

        private void cycleMileageStartNumInput_ValueChanged(object sender, EventArgs e)
        {
            updateCycleMileageTable();
        }

        private void cycleMileageEndNumInput_ValueChanged(object sender, EventArgs e)
        {
            updateCycleMileageTable();
        }

        private void cycleMileageRatioNumInput_ValueChanged(object sender, EventArgs e)
        {
            updateCycleMileageTable();
        }

        private void updateCycleMileageTable()
        {
            double mileageDelta = (double)cycleMileageDeltaNumInput.Value;


            mileageTablePanel.Controls.Clear();
            mileageTablePanel.AutoSize = true;
            mileageTablePanel.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            mileageTablePanel.ColumnCount = 2;
            mileageTablePanel.RowCount = (int)numCyclesNumInput.Value + 1;

            for (int ii = 0; ii < numCyclesNumInput.Value+1; ii++)
            {

                //Next, add a row.  Only do this when once, when creating the first column
                if (ii == 0)
                {
                    mileageTablePanel.RowStyles.Add(new RowStyle(SizeType.AutoSize));
                    mileageTablePanel.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
                    mileageTablePanel.Controls.Add(new Label() { Text = "Cycle", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 0);
                    mileageTablePanel.Controls.Add(new Label() { Text = "Milage", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 1, 0);
                }

                else
                {
                    double doubleCycleMileage = (double)cycleMileageStartNumInput.Value + mileageDelta * (ii - 1);
                    double maxMileage = (double)cycleMileageEndNumInput.Value;
                    if (doubleCycleMileage > maxMileage)
                    {
                        doubleCycleMileage = maxMileage;
                    }

                    mileageTablePanel.Controls.Add(new Label() { Text = ii.ToString(), Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, ii);
                    mileageTablePanel.Controls.Add(new NumericUpDown() { Value = (decimal)Math.Ceiling(doubleCycleMileage), Anchor = AnchorStyles.None, Dock = DockStyle.Fill }, 1, ii);
                }
            }
        }



        private void updateLongRunLevelTable()
        {

            longRunLevelTable.Controls.Clear();
            longRunLevelTable.AutoSize = true;
            longRunLevelTable.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            longRunLevelTable.ColumnCount = 2;
            longRunLevelTable.RowCount = (int)numOfLongRunLevels.Value + 1;


            longRunLevelTable.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            longRunLevelTable.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            longRunLevelTable.Controls.Add(new Label() { Text = "Level", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 0);
            longRunLevelTable.Controls.Add(new Label() { Text = "Milage", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 1, 0);

            int numLevels = (int)numOfLongRunLevels.Value;

            NumericUpDown numUpDown1 = new NumericUpDown();
            NumericUpDown numUpDown2 = new NumericUpDown();
            NumericUpDown numUpDown3 = new NumericUpDown();
            NumericUpDown numUpDown4 = new NumericUpDown();


            numUpDown1.Anchor = AnchorStyles.None;
            numUpDown2.Anchor = AnchorStyles.None;
            numUpDown3.Anchor = AnchorStyles.None;
            numUpDown4.Anchor = AnchorStyles.None;

            numUpDown1.Dock = DockStyle.Fill;
            numUpDown2.Dock = DockStyle.Fill;
            numUpDown3.Dock = DockStyle.Fill;
            numUpDown4.Dock = DockStyle.Fill;
           

            switch (numLevels)
            {
                case 1:
                    numUpDown1.Value = 12;
                    longRunLevelTable.Controls.Add(new Label() { Text = "1", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 1);
                    longRunLevelTable.Controls.Add(numUpDown1, 1, 1);
                    break;
                case 2:
                    numUpDown1.Value = 10;
                    numUpDown2.Value = 14;
                    longRunLevelTable.Controls.Add(new Label() { Text = "1", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 1);
                    longRunLevelTable.Controls.Add(numUpDown1, 1, 1);
                    longRunLevelTable.Controls.Add(new Label() { Text = "2", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 2);
                    longRunLevelTable.Controls.Add(numUpDown2, 1, 2);
                    break;
                case 3:
                    numUpDown1.Value = 10;
                    numUpDown2.Value = 12;
                    numUpDown3.Value = 14;

                    longRunLevelTable.Controls.Add(new Label() { Text = "1", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 1);
                    longRunLevelTable.Controls.Add(numUpDown1, 1, 1);
                    longRunLevelTable.Controls.Add(new Label() { Text = "2", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 2);
                    longRunLevelTable.Controls.Add(numUpDown2, 1, 2);
                    longRunLevelTable.Controls.Add(new Label() { Text = "3", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 3);
                    longRunLevelTable.Controls.Add(numUpDown3, 1, 3);
                    break;
                case 4:
                    numUpDown1.Value = 8;
                    numUpDown2.Value = 10;
                    numUpDown3.Value = 12;
                    numUpDown4.Value = 14;

                    longRunLevelTable.Controls.Add(new Label() { Text = "1", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 1);
                    longRunLevelTable.Controls.Add(numUpDown1 , 1, 1);
                    longRunLevelTable.Controls.Add(new Label() { Text = "2", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 2);
                    longRunLevelTable.Controls.Add(numUpDown2 , 1, 2);
                    longRunLevelTable.Controls.Add(new Label() { Text = "3", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 3);
                    longRunLevelTable.Controls.Add(numUpDown3 , 1, 3);
                    longRunLevelTable.Controls.Add(new Label() { Text = "4", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 4);
                    longRunLevelTable.Controls.Add(numUpDown4 , 1, 4);
                    break;
            }
            numUpDown1.ValueChanged += new EventHandler(longRunLevel_ValueChanged);
            numUpDown2.ValueChanged += new EventHandler(longRunLevel_ValueChanged);
            numUpDown3.ValueChanged += new EventHandler(longRunLevel_ValueChanged);
            numUpDown4.ValueChanged += new EventHandler(longRunLevel_ValueChanged);
        }


        private void updateLongRunTable()
        {
            longRunCycleTable.Controls.Clear();
            longRunCycleTable.AutoSize = true;
            longRunCycleTable.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            longRunCycleTable.ColumnCount = 2;
            longRunCycleTable.RowCount = (int)numCyclesNumInput.Value + 1;
            int longRunLevelIndex = 0;
            int numLevels = (int)numOfLongRunLevels.Value;


            for (int ii = 0; ii < numCyclesNumInput.Value + 1; ii++)
            {

                //Next, add a row.  Only do this when once, when creating the first column
                if (ii == 0)
                {
                    longRunCycleTable.RowStyles.Add(new RowStyle(SizeType.AutoSize));
                    longRunCycleTable.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
                    longRunCycleTable.Controls.Add(new Label() { Text = "Cycle", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 0);
                    longRunCycleTable.Controls.Add(new Label() { Text = "Milage", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 1, 0);
                }

                else
                {

                    NumericUpDown thisNumericUpDown = (NumericUpDown)longRunLevelTable.GetControlFromPosition(1, (longRunLevelIndex + 1));
                    decimal longRunMiles = thisNumericUpDown.Value;

                    longRunCycleTable.Controls.Add(new Label() { Text = ii.ToString(), Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, ii);
                    longRunCycleTable.Controls.Add(new NumericUpDown() { Value = longRunMiles, Anchor = AnchorStyles.None, Dock = DockStyle.Fill }, 1, ii);
                    longRunLevelIndex++;
                    if (longRunLevelIndex > (numLevels - 1))
                    {
                        longRunLevelIndex = 0;
                    }
                }
            }
        }

        private void numOfLongRunLevels_ValueChanged(object sender, EventArgs e)
        {
            updateLongRunLevelTable();
            updateLongRunTable();
        }

        public void longRunLevel_ValueChanged(object sender, EventArgs e)
        {
            updateLongRunTable();
        }

        private void updateSpeedWorkoutTable()
        {
            double mileageDelta = (double)cycleMileageDeltaNumInput.Value;


            speedWorkoutTable.Controls.Clear();
            speedWorkoutTable.AutoSize = true;
            speedWorkoutTable.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            speedWorkoutTable.ColumnCount = 12;
            speedWorkoutTable.RowCount = (int)numCyclesNumInput.Value + 1;

            for (int ii = 0; ii < numCyclesNumInput.Value + 1; ii++)
            {

                //Next, add a row.  Only do this when once, when creating the first column
                if (ii == 0)
                {
                    speedWorkoutTable.RowStyles.Add(new RowStyle(SizeType.AutoSize));
                    speedWorkoutTable.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Cycle", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Warmup", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 1, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Units", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 2, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Reps", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 3, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Interval", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 4, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Units", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 5, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Pace", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 6, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Rest", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 7, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Units", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 8, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Cooldown", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 9, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Units", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 10, 0);
                    speedWorkoutTable.Controls.Add(new Label() { Text = "Total Distance", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 11, 0);
                }

                else
                {


                    NumericUpDown warmupDist = new NumericUpDown() { Maximum = 100000, Minimum = 0, DecimalPlaces = 1, Value = (decimal)1.5, Anchor = AnchorStyles.None, Dock = DockStyle.Fill };
                    warmupDist.ValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    ComboBox warmUnits = new ComboBox();
                    warmUnits.Items.Add("Miles");
                    warmUnits.Items.Add("Meters");
                    warmUnits.Anchor = AnchorStyles.None;
                    warmUnits.Dock = DockStyle.Fill;
                    warmUnits.Text = "Miles";
                    warmUnits.SelectedValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    NumericUpDown reps = new NumericUpDown() {Maximum = 100000, Minimum = 0, DecimalPlaces = 0, Value = (decimal)12, Anchor = AnchorStyles.None, Dock = DockStyle.Fill };
                    reps.ValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    NumericUpDown intervalDist = new NumericUpDown() { Maximum = 100000, Minimum = 0, DecimalPlaces = 1, Value = (decimal)400.0, Anchor = AnchorStyles.None, Dock = DockStyle.Fill };
                    warmupDist.ValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    ComboBox intervalUnits = new ComboBox();
                    intervalUnits.Items.Add("Miles");
                    intervalUnits.Items.Add("Meters");
                    intervalUnits.Anchor = AnchorStyles.None;
                    intervalUnits.Dock = DockStyle.Fill;
                    intervalUnits.Text = "Meters";
                    intervalUnits.SelectedValueChanged += new EventHandler(speedWorkout_ValueChanged);


                    ComboBox intervalPace = new ComboBox();
                    intervalPace.Items.Add("5K");
                    intervalPace.Items.Add("10K");
                    intervalPace.Anchor = AnchorStyles.None;
                    intervalPace.Dock = DockStyle.Fill;
                    intervalPace.Text = "5K";
                    intervalPace.SelectedValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    NumericUpDown restDist = new NumericUpDown() { Maximum = 100000, Minimum = 0, DecimalPlaces = 1, Value = (decimal)400.0, Anchor = AnchorStyles.None, Dock = DockStyle.Fill };
                    warmupDist.ValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    ComboBox restUnits = new ComboBox();
                    restUnits.Items.Add("Miles");
                    restUnits.Items.Add("Meters");
                    restUnits.Anchor = AnchorStyles.None;
                    restUnits.Dock = DockStyle.Fill;
                    restUnits.Text = "Meters";
                    restUnits.SelectedValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    NumericUpDown coolDist = new NumericUpDown() { Maximum = 100000, Minimum = 0, DecimalPlaces = 1, Value = (decimal)1.5, Anchor = AnchorStyles.None, Dock = DockStyle.Fill };
                    warmupDist.ValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    ComboBox coolUnits = new ComboBox();
                    coolUnits.Items.Add("Miles");
                    coolUnits.Items.Add("Meters");
                    coolUnits.Anchor = AnchorStyles.None;
                    coolUnits.Dock = DockStyle.Fill;
                    coolUnits.Text = "Miles";
                    coolUnits.SelectedValueChanged += new EventHandler(speedWorkout_ValueChanged);

                    speedWorkoutTable.Controls.Add(new Label() { Text = ii.ToString(), Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 0, ii);
                    speedWorkoutTable.Controls.Add(warmupDist, 1, ii);
                    speedWorkoutTable.Controls.Add(warmUnits, 2, ii);
                    speedWorkoutTable.Controls.Add(reps, 3, ii);
                    speedWorkoutTable.Controls.Add(intervalDist, 4, ii);
                    speedWorkoutTable.Controls.Add(intervalUnits, 5, ii);
                    speedWorkoutTable.Controls.Add(intervalPace, 6, ii);
                    speedWorkoutTable.Controls.Add(restDist, 7, ii);
                    speedWorkoutTable.Controls.Add(restUnits, 8, ii);
                    speedWorkoutTable.Controls.Add(coolDist, 9, ii);
                    speedWorkoutTable.Controls.Add(coolUnits, 10, ii);

                    double warmDistance;
                    double intervalDistance;
                    double restDistance;
                    double coolDistance;

                    if (warmUnits.Text == "Miles")
                    {
                        warmDistance = (double)warmupDist.Value;
                    }
                    else
                    {
                        warmDistance = (double)warmupDist.Value * 0.000621371;
                    }

                    if (intervalUnits.Text == "Miles")
                    {
                        intervalDistance = (double)intervalDist.Value;
                    }
                    else
                    {
                        intervalDistance = (double)intervalDist.Value * 0.000621371;
                    }

                    if (restUnits.Text == "Miles")
                    {
                        restDistance = (double)restDist.Value;
                    }
                    else
                    {
                        restDistance = (double)restDist.Value * 0.000621371;
                    }

                    if (coolUnits.Text == "Miles")
                    {
                        coolDistance = (double)coolDist.Value;
                    }
                    else
                    {
                        coolDistance = (double)coolDist.Value * 0.000621371;
                    }

                    double totalDistance = warmDistance + intervalDistance * (double)reps.Value + restDistance * ((double)reps.Value - 1.0) + coolDistance;

                    speedWorkoutTable.Controls.Add(new Label() {Text = (Math.Round(totalDistance*10)/10).ToString() + "Miles", Anchor = AnchorStyles.None, TextAlign = ContentAlignment.MiddleCenter, Dock = DockStyle.Fill }, 11, ii);

                }
            }
        }


        private void speedWorkout_ValueChanged(object sender, EventArgs e)
        {

        }
    }



    }




